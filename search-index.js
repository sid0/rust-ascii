var searchIndex = {};
searchIndex["ascii"] = {"doc":"A library that provides ASCII-only string and character types, equivalent to the `char`, `str`  and `String` types in the standard library.","items":[[3,"ToAsciiCharError","ascii","Error returned by `ToAsciiChar`.",null,null],[3,"AsciiStr","","AsciiStr represents a byte or string slice that only contains ASCII characters.",null,null],[3,"AsAsciiStrError","","Error that is returned when a sequence of `u8` are not all ASCII.",null,null],[3,"Lines","","An iterator over the lines of the internal character array.",null,null],[3,"AsciiString","","A growable string stored as an ASCII encoded buffer.",null,null],[3,"FromAsciiError","","A possible error value when converting an `AsciiString` from a byte vector or string. It wraps an `AsAsciiStrError` which you can get through the `ascii_error()` method.",null,null],[4,"AsciiChar","","An ASCII character. It wraps a `u8`, with the highest bit always zero.",null,null],[13,"Null","","`'\\0'`",0,null],[13,"SOH","","Start Of Heading",0,null],[13,"SOX","","Start Of teXt",0,null],[13,"ETX","","End of TeXt",0,null],[13,"EOT","","End Of Transmission",0,null],[13,"ENQ","","Enquiry",0,null],[13,"ACK","","Acknowledgement",0,null],[13,"Bell","","bell / alarm / audible",0,null],[13,"BackSpace","","Backspace",0,null],[13,"Tab","","`'\\t'`",0,null],[13,"LineFeed","","`'\\n'`",0,null],[13,"VT","","Vertical tab",0,null],[13,"FF","","Form Feed",0,null],[13,"CarriageReturn","","`'\\r'`",0,null],[13,"SI","","Shift In",0,null],[13,"SO","","Shift Out",0,null],[13,"DLE","","Data Link Escape",0,null],[13,"DC1","","Device control 1, often XON",0,null],[13,"DC2","","Device control 2",0,null],[13,"DC3","","Device control 3, Often XOFF",0,null],[13,"DC4","","Device control 4",0,null],[13,"NAK","","Negative AcKnowledgement",0,null],[13,"SYN","","Synchronous idle",0,null],[13,"ETB","","End of Transmission Block",0,null],[13,"CAN","","Cancel",0,null],[13,"EM","","End of Medium",0,null],[13,"SUB","","Substitute",0,null],[13,"ESC","","Escape",0,null],[13,"FS","","File Separator",0,null],[13,"GS","","Group Separator",0,null],[13,"RS","","Record Separator",0,null],[13,"US","","Unit Separator",0,null],[13,"Space","","`' '`",0,null],[13,"Exclamation","","`'!'`",0,null],[13,"Quotation","","`'\"'`",0,null],[13,"Hash","","`'#'`",0,null],[13,"Dollar","","`'$'`",0,null],[13,"Percent","","`'%'`",0,null],[13,"Ampersand","","`'&'`",0,null],[13,"Apostrophe","","`'\\''`",0,null],[13,"ParenOpen","","`'('`",0,null],[13,"ParenClose","","`')'`",0,null],[13,"Asterisk","","`'*'`",0,null],[13,"Plus","","`'+'`",0,null],[13,"Comma","","`','`",0,null],[13,"Minus","","`'-'`",0,null],[13,"Dot","","`'.'`",0,null],[13,"Slash","","`'/'`",0,null],[13,"_0","","`'0'`",0,null],[13,"_1","","`'1'`",0,null],[13,"_2","","`'2'`",0,null],[13,"_3","","`'3'`",0,null],[13,"_4","","`'4'`",0,null],[13,"_5","","`'5'`",0,null],[13,"_6","","`'6'`",0,null],[13,"_7","","`'7'`",0,null],[13,"_8","","`'8'`",0,null],[13,"_9","","`'9'`",0,null],[13,"Colon","","`':'`",0,null],[13,"Semicolon","","`';'`",0,null],[13,"LessThan","","`'<'`",0,null],[13,"Equal","","`'='`",0,null],[13,"GreaterThan","","`'>'`",0,null],[13,"Question","","`'?'`",0,null],[13,"At","","`'@'`",0,null],[13,"A","","`'A'`",0,null],[13,"B","","`'B'`",0,null],[13,"C","","`'C'`",0,null],[13,"D","","`'D'`",0,null],[13,"E","","`'E'`",0,null],[13,"F","","`'F'`",0,null],[13,"G","","`'G'`",0,null],[13,"H","","`'H'`",0,null],[13,"I","","`'I'`",0,null],[13,"J","","`'J'`",0,null],[13,"K","","`'K'`",0,null],[13,"L","","`'L'`",0,null],[13,"M","","`'M'`",0,null],[13,"N","","`'N'`",0,null],[13,"O","","`'O'`",0,null],[13,"P","","`'P'`",0,null],[13,"Q","","`'Q'`",0,null],[13,"R","","`'R'`",0,null],[13,"S","","`'S'`",0,null],[13,"T","","`'T'`",0,null],[13,"U","","`'U'`",0,null],[13,"V","","`'V'`",0,null],[13,"W","","`'W'`",0,null],[13,"X","","`'X'`",0,null],[13,"Y","","`'Y'`",0,null],[13,"Z","","`'Z'`",0,null],[13,"BracketOpen","","`'['`",0,null],[13,"BackSlash","","`'\\'`",0,null],[13,"BracketClose","","`']'`",0,null],[13,"Caret","","`'_'`",0,null],[13,"UnderScore","","`'_'`",0,null],[13,"Grave","","`'`'`",0,null],[13,"a","","`'a'`",0,null],[13,"b","","`'b'`",0,null],[13,"c","","`'c'`",0,null],[13,"d","","`'d'`",0,null],[13,"e","","`'e'`",0,null],[13,"f","","`'f'`",0,null],[13,"g","","`'g'`",0,null],[13,"h","","`'h'`",0,null],[13,"i","","`'i'`",0,null],[13,"j","","`'j'`",0,null],[13,"k","","`'k'`",0,null],[13,"l","","`'l'`",0,null],[13,"m","","`'m'`",0,null],[13,"n","","`'n'`",0,null],[13,"o","","`'o'`",0,null],[13,"p","","`'p'`",0,null],[13,"q","","`'q'`",0,null],[13,"r","","`'r'`",0,null],[13,"s","","`'s'`",0,null],[13,"t","","`'t'`",0,null],[13,"u","","`'u'`",0,null],[13,"v","","`'v'`",0,null],[13,"w","","`'w'`",0,null],[13,"x","","`'x'`",0,null],[13,"y","","`'y'`",0,null],[13,"z","","`'z'`",0,null],[13,"CurlyBraceOpen","","`'{'`",0,null],[13,"VerticalBar","","`'|'`",0,null],[13,"CurlyBraceClose","","`'}'`",0,null],[13,"Tilde","","`'~'`",0,null],[13,"DEL","","Delete",0,null],[5,"caret_encode","","Terminals use caret notation to display some typed control codes, such as ^D for EOT and ^Z for SUB.",null,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[5,"caret_decode","","Returns the control code represented by a caret notation letter, or `None` if the letter is not used in caret notation.",null,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","Constructs an ASCII character from a `u8`, `char` or other character type.",0,{"inputs":[{"name":"c"}],"output":{"name":"result"}}],[11,"from_unchecked","","Constructs an ASCII character from a `char` or `u8` without any checks.",0,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"as_byte","","Converts an ASCII character into a `u8`.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"as_char","","Converts an ASCII character into a `char`.",0,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_digit","","Check if the character is a number (0-9)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Check if the character is a letter or number",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_blank","","Check if the character is a space or horizontal tab",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Check if the character is a ' ', '\\t', '\\n' or '\\r'",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Check if the character is a control character",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_graph","","Checks if the character is printable (except space)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_print","","Checks if the character is printable (including space)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lowercase","","Checks if the character is alphabetic and lowercase",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uppercase","","Checks if the character is alphabetic and uppercase",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_punctuation","","Checks if the character is punctuation",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hex","","Checks if the character is a valid hex digit",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_printable_char","","Unicode has printable versions of the ASCII control codes, like '‚êõ'.",0,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_ascii","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"to_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toasciicharerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"toasciicharerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_ascii_char","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_ascii_char_unchecked","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"new","","Coerces into an `AsciiStr` slice.",2,{"inputs":[{"name":"s"}],"output":{"name":"asciistr"}}],[11,"as_str","","Converts `&self` to a `&str` slice.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Converts `&self` into a byte slice.",2,null],[11,"as_slice","","Returns the entire string as slice of `AsciiChar`s.",2,null],[11,"as_mut_slice","","Returns the entire string as mutable slice of `AsciiChar`s.",2,null],[11,"as_ptr","","Returns a raw pointer to the `AsciiStr`'s buffer.",2,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the `AsciiStr`'s buffer.",2,null],[11,"to_ascii_string","","Copies the content of this `AsciiStr` into an owned `AsciiString`.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"from_ascii","","Converts anything that can represent a byte slice into an `AsciiStr`.",2,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"from_ascii_unchecked","","Converts anything that can be represented as a byte slice to an `AsciiStr` without checking for non-ASCII characters..",2,{"inputs":[{"name":"b"}],"output":{"name":"asciistr"}}],[11,"len","","Returns the number of characters / bytes in this ASCII sequence.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the ASCII slice contains zero bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"chars","","Returns an iterator over the characters of the `AsciiStr`.",2,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chars_mut","","Returns an iterator over the characters of the `AsciiStr` which allows you to modify the value of each `AsciiChar`.",2,{"inputs":[{"name":"self"}],"output":{"name":"charsmut"}}],[11,"lines","","Returns an iterator over the lines of the `AsciiStr`, which are themselves `AsciiStr`s.",2,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"trim","","Returns an ASCII string slice with leading and trailing whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trim_left","","Returns an ASCII string slice with leading whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trim_right","","Returns an ASCII string slice with trailing whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"to_owned","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"as_ref","","",2,null],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"asciistr"}}],[11,"is_ascii","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"to_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"eq_ignore_ascii_case","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asasciistrerror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"asasciistrerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"asasciistrerror"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index of the first non-ASCII byte.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ascii_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ascii_str_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"as_mut_ascii_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut_ascii_str_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"asciistring"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"ordering"}}],[11,"hash","","",5,null],[11,"new","","Creates a new, empty ASCII string buffer without allocating.",5,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new ASCII string buffer with the given capacity. The string will be able to hold exactly `capacity` bytes without reallocating. If `capacity` is 0, the ASCII string will not allocate.",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Creates a new `AsciiString` from a length, capacity and pointer.",5,null],[11,"from_ascii_unchecked","","Converts a vector of bytes to an `AsciiString` without checking for non-ASCII characters.",5,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"from_ascii","","Converts anything that can represent a byte buffer into an `AsciiString`.",5,{"inputs":[{"name":"b"}],"output":{"name":"result"}}],[11,"push_str","","Pushes the given ASCII string onto this ASCII string buffer.",5,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":null}],[11,"capacity","","Returns the number of bytes that this ASCII string buffer can hold without reallocating.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted in the given `AsciiString`. The collection may reserve more space to avoid frequent reallocations.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be inserted in the given `AsciiString`. Does nothing if the capacity is already sufficient.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this ASCII string buffer to match it's length.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Adds the given ASCII character to the end of the ASCII string.",5,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":null}],[11,"truncate","","Shortens a ASCII string to the specified length.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the ASCII string buffer and returns it. Returns `None` if this string buffer is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Removes the ASCII character at position `idx` from the buffer and returns it.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"insert","","Inserts an ASCII character into the buffer at position `idx`.",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"asciichar"}],"output":null}],[11,"len","","Returns the number of bytes in this ASCII string.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the ASCII string contains zero bytes.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the ASCII string, setting length (but not capacity) to zero.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"borrow","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"from","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"as_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",5,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"asciistring"}}],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromasciierror"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fromasciierror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fromasciierror"}],"output":{"name":"bool"}}],[11,"ascii_error","","Get the position of the first non-ASCII byte or character.",6,{"inputs":[{"name":"self"}],"output":{"name":"asasciistrerror"}}],[11,"into_source","","Get back the original, unmodified type.",6,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","Always returns an `AsAsciiStrError`",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_ascii_string_unchecked","","",5,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"into_ascii_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"Chars","","An immutable iterator over the characters of an `AsciiStr`.",null,null],[6,"CharsMut","","A mutable iterator over the characters of an `AsciiStr`.",null,null],[8,"ToAsciiChar","","Convert `char`, `u8` and other character types to `AsciiChar`.",null,null],[10,"to_ascii_char_unchecked","","Convert to `AsciiChar` without checking that it is an ASCII character.",7,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[10,"to_ascii_char","","Convert to `AsciiChar`.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"AsAsciiStr","","Convert slices of bytes to `AsciiStr`.",null,null],[10,"as_ascii_str_unchecked","","Convert to an ASCII slice without checking for non-ASCII characters.",8,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[10,"as_ascii_str","","Convert to an ASCII slice.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"AsMutAsciiStr","","Convert mutable slices of bytes to `AsciiStr`.",null,null],[10,"as_mut_ascii_str_unchecked","","Convert to a mutable ASCII slice without checking for non-ASCII characters.",9,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[10,"as_mut_ascii_str","","Convert to a mutable ASCII slice.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"IntoAsciiString","","Convert vectors into `AsciiString`.",null,null],[10,"into_ascii_string_unchecked","","Convert to `AsciiString` without checking for non-ASCII characters.",10,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[10,"into_ascii_string","","Convert to `AsciiString`.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"AsciiChar"],[3,"ToAsciiCharError"],[3,"AsciiStr"],[3,"Lines"],[3,"AsAsciiStrError"],[3,"AsciiString"],[3,"FromAsciiError"],[8,"ToAsciiChar"],[8,"AsAsciiStr"],[8,"AsMutAsciiStr"],[8,"IntoAsciiString"]]};
initSearch(searchIndex);
